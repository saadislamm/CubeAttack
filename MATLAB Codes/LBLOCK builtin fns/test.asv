function cubetest(cube,r,out)       % r = Number of rounds of a cipher

len=length(cube);iv=zeros(2^len,64);c=de2bi(0:2^len-1);iv(:,cube)=c;
T=100;n0=0;n1=0;
sum=0;
for l=1:2^len
    z=interface(iv(l,:),zeros(1,80),r,out);
    sum=sum+z;
end
p0=mod(sum,2);
if p0==1 n1=n1+1;else n0=n0+1;end
for i=1:T                   % T = 100 BLR tests for a cube
    k1=randi([0 1],1,80);   % Random key 1
    k2=randi([0 1],1,80);   % Random key 2
    sum=0;
    for l=1:2^len
        z=interface(iv(l,:),k1,r,out);
        sum=sum+z;
    end
    p1=mod(sum,2);
    sum=0;
    for l=1:2^len
        z=interface(iv(l,:),k2,r,out);
        sum=sum+z;
    end
    p2=mod(sum,2);
    sum=0;
    for l=1:2^len
        z=interface(iv(l,:),xor(k1,k2),r,out);
        sum=sum+z;
    end
    p12=mod(sum,2);

    if p1==1 n1=n1+1;else n0=n0+1;end    % Update counters:
    if p2==1 n1=n1+1;else n0=n0+1;end

    if mod(p0+p1+p2,2) ~= p12            % Linearity test:
        fprintf('Non-Linear\n');
        break;
    end
end
if n0==2*T+1 || n1==2*T+1
    fprintf('Constant\n');
    
elseif i==T                              % Maxterm Reconstruction
    k=[zeros(1,80); diag(ones(1,80))];
    
    if p0==1 p=1;else p=0;end
    S=[p0];
    for b=1:80 
    sum=0;
    for l=1:2^len
        z=interface(iv(l,:),k(b+1,:),r,out);
        sum=sum+z;
    end
    pck=mod(sum,2);
    if xor(pck,p)==1 S=[S,b];end
    end
    cube
    S
end